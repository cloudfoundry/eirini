// Code generated by counterfeiter. DO NOT EDIT.
package bifrostfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/bifrost"
	"code.cloudfoundry.org/eirini/models/cf"
	"code.cloudfoundry.org/eirini/opi"
)

type FakeConverter struct {
	ConvertStub        func(request cf.DesireLRPRequest) (opi.LRP, error)
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		request cf.DesireLRPRequest
	}
	convertReturns struct {
		result1 opi.LRP
		result2 error
	}
	convertReturnsOnCall map[int]struct {
		result1 opi.LRP
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConverter) Convert(request cf.DesireLRPRequest) (opi.LRP, error) {
	fake.convertMutex.Lock()
	ret, specificReturn := fake.convertReturnsOnCall[len(fake.convertArgsForCall)]
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		request cf.DesireLRPRequest
	}{request})
	fake.recordInvocation("Convert", []interface{}{request})
	fake.convertMutex.Unlock()
	if fake.ConvertStub != nil {
		return fake.ConvertStub(request)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.convertReturns.result1, fake.convertReturns.result2
}

func (fake *FakeConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *FakeConverter) ConvertArgsForCall(i int) cf.DesireLRPRequest {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return fake.convertArgsForCall[i].request
}

func (fake *FakeConverter) ConvertReturns(result1 opi.LRP, result2 error) {
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 opi.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeConverter) ConvertReturnsOnCall(i int, result1 opi.LRP, result2 error) {
	fake.ConvertStub = nil
	if fake.convertReturnsOnCall == nil {
		fake.convertReturnsOnCall = make(map[int]struct {
			result1 opi.LRP
			result2 error
		})
	}
	fake.convertReturnsOnCall[i] = struct {
		result1 opi.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bifrost.Converter = new(FakeConverter)
