// Code generated by counterfeiter. DO NOT EDIT.
package eventsfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/events"
	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/runtimeschema/cc_messages"
)

type FakeCcClient struct {
	AppCrashedStub        func(proccessGuid string, crashedRequest cc_messages.AppCrashedRequest, log lager.Logger)
	appCrashedMutex       sync.RWMutex
	appCrashedArgsForCall []struct {
		proccessGuid   string
		crashedRequest cc_messages.AppCrashedRequest
		log            lager.Logger
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCcClient) AppCrashed(proccessGuid string, crashedRequest cc_messages.AppCrashedRequest, log lager.Logger) {
	fake.appCrashedMutex.Lock()
	fake.appCrashedArgsForCall = append(fake.appCrashedArgsForCall, struct {
		proccessGuid   string
		crashedRequest cc_messages.AppCrashedRequest
		log            lager.Logger
	}{proccessGuid, crashedRequest, log})
	fake.recordInvocation("AppCrashed", []interface{}{proccessGuid, crashedRequest, log})
	fake.appCrashedMutex.Unlock()
	if fake.AppCrashedStub != nil {
		fake.AppCrashedStub(proccessGuid, crashedRequest, log)
	}
}

func (fake *FakeCcClient) AppCrashedCallCount() int {
	fake.appCrashedMutex.RLock()
	defer fake.appCrashedMutex.RUnlock()
	return len(fake.appCrashedArgsForCall)
}

func (fake *FakeCcClient) AppCrashedArgsForCall(i int) (string, cc_messages.AppCrashedRequest, lager.Logger) {
	fake.appCrashedMutex.RLock()
	defer fake.appCrashedMutex.RUnlock()
	return fake.appCrashedArgsForCall[i].proccessGuid, fake.appCrashedArgsForCall[i].crashedRequest, fake.appCrashedArgsForCall[i].log
}

func (fake *FakeCcClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appCrashedMutex.RLock()
	defer fake.appCrashedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCcClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.CcClient = new(FakeCcClient)
